<?php

namespace Okta\Resource;

/**
 * Implementation of the Okta Factors (MFA) resource, access via $okta->factor
 *
 * http://developer.okta.com/docs/api/resources/factors.html
 */
class Factor extends Base
{

    /**
     * Fetches a factor for the specified user.
     *
     * @param  string $uid User ID
     * @param  string $fid Factor ID
     *
     * @return object      Factor object
     */
    public function get($uid, $fid) {

        $request = $this->request->get('users/' . $uid . '/factors/' . $fid);

        return $request->send();

    }

    /**
     * Enumerates all the enrolled factors for the specified user.
     *
     * @param  string $uid User ID
     *
     * @return array       Array of Factors
     */
    public function listEnrolled($uid) {

        $request = $this->request->get('users/' . $uid . '/factors');

        return $request->send();

    }

    /**
     * Enumerates all the supported factors that can be enrolled for the
     * specified user.
     *
     * @param  string $uid User ID
     *
     * @return array       Array of Factors
     */
    public function catalog($uid) {

        $request = $this->request->get('users/' . $uid . '/factors/catalog');

        return $request->send();

    }

    /**
     * Alias of $this->catalog()
     *
     * @param  string $uid User ID
     *
     * @return array       Array of enrollable factors
     */
    public function listEnrollable($uid) {
        return $this->catalog($uid);
    }

    /**
     * Enumerates all available security questions for a user's question factor.
     *
     * @param  string $uid User ID
     *
     * @return array       Array of available security questions
     */
    public function listSecurityQuestions($uid) {

        $request = $this->request->get('users/' . $uid . '/factors/questions');

        return $request->send();

    }

    /**
     * Enrolls a user with a supported factor.
     *
     * @param  string $uid    ID of user
     * @param  array  $factor Array of factor properties
     *
     * @return object         Enrolled Factor
     */
    public function enroll($uid, array $factor) {

        $request = $this->request->post('users/' . $uid . '/factors');

        $request->data($factor);

        return $request->send();

    }

    /**
     * Convenience method for enrolling a user with a TOTP factor.
     *
     * @param  string $uid User ID
     *
     * @return object      Factor object
     */
    public function enrollTotp($uid) {

        return $this->enroll($uid, [
            'factorType' => 'token:software:totp',
            'provider'   => 'GOOGLE'
        ]);

    }

    /**
     * Convenience method for enrolling a user with a SMS factor.
     *
     * @param  string $uid         User ID
     * @param  string $phoneNumber Phone number
     *
     * @return object              Factor object
     */
    public function enrollSms($uid, $phoneNumber) {

        return $this->enroll($uid, [
            'factorType' => 'sms',
            'provider'   => 'OKTA',
            'profile'    => [
                'phoneNumber' => $phoneNumber
            ]
        ]);

    }

    /**
     * Activates a factor by verifying the OTP.
     *
     * @param  string $uid      User ID
     * @param  string $fid      Factor ID
     * @param  string $passCode OTP generated by device
     *
     * @return object           Factor object
     */
    public function activate($uid, $fid, $passCode) {

        $request = $this->request->post('users/' . $uid . '/factors/' . $fid . '/lifecycle/activate');

        $request->data(['passCode' => $passCode]);

        return $request->send();

    }

    /**
     * Unenrolls an existing factor for the specified user allowing the user to
     * enroll a new factor.
     *
     * @param  string $uid User ID
     * @param  string $fid Factor ID
     *
     * @return null        '204 No Content'
     */
    public function reset($uid, $fid) {

        $request = $this->request->delete('users/' . $uid . '/factors/' . $fid);

        return $request->send();

    }

    /**
     * Verifies a factor.
     *
     * @param  string $uid          ID of user
     * @param  string $fid          ID of factor
     * @param  array  $verification Array of factor verification properties
     *
     * @return object               Factor verification result object. If the
     *                              answer is invalid you will receive a 403
     *                              Forbidden status code.
     */
    public function verify($uid, $fid, array $verification = null) {

        $request = $this->request->post('users/' . $uid . '/factors/' . $fid . '/verify');

        if (isset($verification)) $request->data($verification);

        return $request->send();

    }

    /**
     * Convinience method for verifying a TOTP factor.
     *
     * @param  string $uid      ID of user
     * @param  string $fid      ID of factor
     * @param  string $passCode OTP generated by device
     *
     * @return object           Factor verification result object. If the answer
     *                          is invalid you will receive a 403 Forbidden
     *                          status code.
     */
    public function verifyTotp($uid, $fid, $passCode) {
        return $this->verify($uid, $fic, ['passCode' => $passCode]);
    }

    /**
     * Convinience method for verifying a SMS factor.
     *
     * @param  string $uid      ID of user
     * @param  string $fid      ID of factor
     * @param  string $passCode OTP sent to device
     *
     * @return object           Factor verification result object. If the answer
     *                          is invalid you will receive a 403 Forbidden
     *                          status code.
     */
    public function verifySMS($uid, $fid, $passCode) {
        return $this->verify($uid, $fic, ['passCode' => $passCode]);
    }

    /**
     * Polls a push verification transaction for completion. The transaction
     * will have a result of WAITING, SUCCESS, REJECTED, or TIMEOUT.
     *
     * @param  string $uid ID of user
     * @param  string $fid ID of factor
     * @param  string $tid ID of transaction
     *
     * @return object      Factor verification result object
     */
    public function poll($uid, $fid, $tid) {

        $request = $this->request->get('users/' . $uid . '/factors/' . $fid . '/transactions/' . $tid);

        return $request->send();

    }

}

